#!/bin/bash

# preview fugitive files with vim
if [[ $1 == "fugitive:///"* ]]; then
	vim -i NONE --not-a-term --cmd 'set t_ti= t_te=' +redraw +q -- "${1}"
	exit
fi

# older versions of file do not have this flag
if { file --help 2>&1 || :; } | \grep -q -e '--no-sandbox'; then
	no_sandbox_flag="--no-sandbox"
else
	no_sandbox_flag=""
fi

path=${1/#\~/$HOME}
# $no_sandbox_flag has no spaces by definition, and some versions of bash
# seem to have an issue here with quoted variables before "--"  ¯\_(ツ)_/¯
# shellcheck disable=SC2086
FILE=$(file --uncompress $no_sandbox_flag --brief --mime -- "$path")
IFS=';' read -ra FILE_MIME <<<"$FILE"
TYPE="${FILE_MIME[0]%%/*}"
if [[ $TYPE == "application" ]]; then
	TYPE="${FILE_MIME[0]##*/x-}"
fi

if [[ ${FILE_MIME[1]} == *compressed-encoding* ]]; then
	COMPRESSION="${FILE_MIME[1]##*compressed-encoding*/}"
fi

if [[ ${FILE_MIME[1]} == *ascii* ]]; then
	TYPE="text"
fi

if [[ ${FILE_MIME[1]} == *utf* ]]; then
	TYPE="text"
fi

if [[ $TYPE == "text" ]]; then
	case "$COMPRESSION" in
	zstd)
		zstdcat "$path"
		;;
	zip | gzip)
		zcat "$path"
		;;
	x-bzip2)
		bzcat "$path"
		;;
	x-xz)
		xzcat "$path"
		;;
	x-lz4)
		lz4cat "$path"
		;;
	x-lzma)
		lzcat "$path"
		;;
	"")
		"${@:2}" "$path"
		;;
	*)
		echo "$COMPRESSION" "not (yet) supported"
		;;
	esac

elif [[ $TYPE == "tar" ]]; then
	# tar does auto-decompression
	tar --to-stdout --extract --file="$path"

else
	# brotli isn't detectable by file
	if [ "${1##*.}" = "br" ]; then
		brotli --decompress --stdout "$path"
	else
		echo type: "$TYPE"
		echo compression: "$COMPRESSION"
		echo \""$FILE"\" is not text
	fi
fi
