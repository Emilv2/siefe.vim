#!/bin/bash
# workaround for git erroring on no argument with -S
# drops the first argument if it's -S|-G, not if it's -S|G'my search'
# so git log/show doesn't complaint about switch `S' not having a value
# also supports git -C log/show/.. -S ...

# Exit on error. Append "|| true" if you expect an error.
set -o errexit

# Exit on error inside any functions or subshells.
set -o errtrace

# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset

# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail

# Turn on tracesif run with TRACE=1 for debugging
if [[ ${TRACE-0} == "1" ]]; then
	set -o xtrace
fi

if [[ $2 == "-G" ]] || [[ $2 == "-S" ]]; then
	args1=("${1}")
	args2=("${@:3}")
elif [[ $# -ge 3 ]] && [[ $1 == "stash" ]] && [[ $2 == "list" ]] && { [[ $3 == "-G" ]] || [[ $3 == "-S" ]]; }; then
	args1=("${@:1:2}")
	args2=("${@:4}")
elif [[ $# -ge 8 ]] && [[ $1 == "-C" ]] && { [[ $4 == "-G" ]] || [[ $4 == "-S" ]]; }; then
	args1=("${@:1:3}")
	args2=("${@:5}")
elif [[ $# -ge 9 ]] && [[ $1 == "-C" ]] && { [[ $9 == "-G" ]] || [[ $9 == "-S" ]]; }; then
	args1=("${@:1:8}")
	args2=("${@:10}")
else
	args1=("${1}")
	args2=("${@:2}")
fi

git "${args1[@]}" "${args2[@]}"
